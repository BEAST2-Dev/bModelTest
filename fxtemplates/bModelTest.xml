<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beast beautitemplate='Standard' beautistatus='' namespace="beast.pkgmgmt:beast.base.core:beast.base.inference:beast.base.evolution.alignment:beast.base.evolution.tree.coalescent:beast.base.util:beast.base.math:beast.evolution.nuc:beast.base.evolution.operator:beast.base.inference.operator:beast.base.evolution.sitemodel:beast.base.evolution.substitutionmodel:beast.base.evolution.likelihood" version="2.7">
    

    <mergewith point='aux-sitemodel-panels'>


            <!-- site models -->
        <!-- gamma site model -->
        <!-- inputLabelMap='beast.evolution.sitemodel.BEASTModelTestSiteModel.mutationRate=Substitution Rate'-->
        <subtemplate id='BEAST Model Test' class='bmodeltest.evolution.sitemodel.BEASTModelTestSiteModel' mainid='BEASTModelTest.s:$(n)'

			suppressInputs="bmodeltest.evolution.sitemodel.BEASTModelTestSiteModel.substModel,
bmodeltest.evolution.sitemodel.BEASTModelTestSiteModel.gammaCategoryCount,
bmodeltest.evolution.sitemodel.BEASTModelTestSiteModel.shape,
bmodeltest.evolution.sitemodel.BEASTModelTestSiteModel.proportionInvariant,
bmodeltest.evolution.sitemodel.BEASTModelTestSiteModel.hasInvariantSites,
bmodeltest.evolution.sitemodel.BEASTModelTestSiteModel.hasGammaRates,
bmodeltest.math.distributions.BMTPrior.x,
bmodeltest.math.distributions.BMTPrior.count,
bmodeltest.math.distributions.NucleotideRevJumpSubstModelRatePrior.substModel,
bmodeltest.math.distributions.NucleotideRevJumpSubstModelRatePrior.x,
bmodeltest.math.distributions.NucleotideRevJumpSubstModelRatePrior.modelIndicator,
bmodeltest.math.distributions.NucleotideRevJumpSubstModelRatePrior.distr"
			>
            <![CDATA[

        <stateNode id="BMT_ModelIndicator.s:$(n)" spec="parameter.IntegerParameter" lower="0" upper="5">5</stateNode>
        <parameter id="BMT_Rates.s:$(n)" dimension="6" lower="0.01" name="stateNode" upper="100.0">1.0</parameter>
        <parameter id="BMT_gammaShape.s:$(n)" name="stateNode">1.0</parameter>
        <parameter id="BMT_ProportionInvariable.s:$(n)" lower="0.0" name="stateNode" upper="1.0">0.1</parameter>
        <stateNode id="hasInvariableSites.s:$(n)" spec="parameter.IntegerParameter">1</stateNode>        
        <stateNode id="hasGammaRates.s:$(n)" spec="parameter.IntegerParameter">1</stateNode>        

        <!-- frequencies estimation -->
        <stateNode id="hasEqualFreqs.s:$(n)" spec="parameter.BooleanParameter">false</stateNode>
        <stateNode id="BMT_frequencies.s:$(n)" spec="parameter.RealParameter">0.25 0.25 0.25 0.25</stateNode>

        <distribution id="BMT_RatesPrior.s:$(n)" spec="bmodeltest.math.distributions.NucleotideRevJumpSubstModelRatePrior" modelIndicator="@BMT_ModelIndicator.s:$(n)" x="@BMT_Rates.s:$(n)"
            priorType="onTransitionsAndTraversals" substModel="@RevJump.s:$(n)"/>

        <distribution id="BMT_GammaShapePrior.s:$(n)" spec="bmodeltest.math.distributions.BMTPrior" count="@hasGammaRates.s:$(n)" x="@BMT_gammaShape.s:$(n)">
                <Exponential name="distr">
                    <parameter lower="0.0" name="mean" upper="0.0" estimate='false'>1.0</parameter>
                </Exponential>
	    </distribution>
	    
    	<distribution id="BMT_PropInvariablePrior.s:$(n)" spec="bmodeltest.math.distributions.BMTPrior" count="@hasInvariableSites.s:$(n)" x="@BMT_ProportionInvariable.s:$(n)">
	    	<Beta name="distr" alpha="1.0" beta="4.0"/>
    	</distribution>

    	<prior id='BMT_MutationRatePrior.s:$(n)' x='@BMT_mutationRate.s:$(n)'><distr spec="OneOnX"/></prior>

            <!-- frequencies estimation -->
            <prior  id="BMT_freqsPrior.s:$(n)"  name="distribution" x="@BMT_frequencies.s:$(n)">
            	<distr spec="beast.base.inference.distribution.Dirichlet" alpha="1.0 1.0 1.0 1.0"/>
            </prior>
            
	    <siteModel id="BEASTModelTest.s:$(n)" spec="bmodeltest.evolution.sitemodel.BEASTModelTestSiteModel" 
		    gammaCategoryCount="4" proportionInvariant="@BMT_ProportionInvariable.s:$(n)" shape="@BMT_gammaShape.s:$(n)"
		    hasGammaRates="@hasGammaRates.s:$(n)" hasInvariantSites="@hasInvariableSites.s:$(n)">
	        <parameter id="BMT_mutationRate.s:$(n)" estimate="false" name="mutationRate">1.0</parameter>
            <substModel id="RevJump.s:$(n)" spec="bmodeltest.evolution.substitutionmodel.NucleotideRevJumpSubstModel" 
                        modelIndicator="@BMT_ModelIndicator.s:$(n)" rates="@BMT_Rates.s:$(n)"
                        modelSet="transitionTransversionSplit">
                        <frequencies id="BMTfreqs.s:$(n)" spec="bmodeltest.evolution.substitutionmodel.ModelFrequencies" data="@$(n)" hasEqualFreqs='@hasEqualFreqs.s:$(n)'  empirical="false"/>
	        </substModel>
	    </siteModel>

	<operator id="BMT_ModelTestOperator.s:$(n)" spec="bmodeltest.evolution.operators.BMTMergeSplitOperator" modelIndicator="@BMT_ModelIndicator.s:$(n)" rates="@BMT_Rates.s:$(n)" substModel="@RevJump.s:$(n)" weight="1.0"/>
        <operator id="BMT_Ratescaler.s:$(n)" spec="bmodeltest.evolution.operators.BMTExchangeOperator" modelIndicator="@BMT_ModelIndicator.s:$(n)" rates="@BMT_Rates.s:$(n)" substModel="@RevJump.s:$(n)" delta="0.15" weight="1.0"/>
	

	<operator id="BMT_hasGammaRatesFlipper.s:$(n)" spec="bmodeltest.evolution.operators.BMTBirthDeathOperator" count="@hasGammaRates.s:$(n)" rates="@BMT_gammaShape.s:$(n)" weight="0.1"/>
        <operator id="BMT_gammaShapeScaler.s:$(n)" spec="bmodeltest.evolution.operators.BMTScaleOperator" count="@hasGammaRates.s:$(n)" parameter="@BMT_gammaShape.s:$(n)" scaleFactor="0.5" weight="0.5"/>

	<operator id="BMT_hasInvariableSitesFlipper.s:$(n)" spec="bmodeltest.evolution.operators.BMTBirthDeathOperator" count="@hasInvariableSites.s:$(n)" rates="@BMT_ProportionInvariable.s:$(n)" weight="0.1"/>
        <operator id="BMT_ProportionInvariableScaler.s:$(n)" spec="bmodeltest.evolution.operators.BMTScaleOperator" count="@hasInvariableSites.s:$(n)" parameter="@BMT_ProportionInvariable.s:$(n)" scaleFactor="0.5" weight="0.5"/>

        <operator id='BMT_mutationRateScaler.s:$(n)' spec='kernel.BactrianScaleOperator' scaleFactor="0.5" weight="0.1" parameter="@BMT_mutationRate.s:$(n)"/>
        
        <!-- frequencies estimation -->
        <operator id="BMT_FreqsFlipOperator.s:$(n)" spec="BitFlipOperator" parameter="@hasEqualFreqs.s:$(n)" weight="0.1"/>
        <operator id='BMT_FrequenciesExchanger.s:$(n)' spec='kernel.BactrianDeltaExchangeOperator' delta="0.01" weight="0.2" parameter="@BMT_frequencies.s:$(n)"/>
    
        <log id="ActivePropInvariable.s:$(n)" spec='bmodeltest.evolution.substitutionmodel.ActiveLogger'>
	        <parameter idref="BMT_ProportionInvariable.s:$(n)"/>
	        <mask idref="hasInvariableSites.s:$(n)"/>
        </log>
        <log id="ActiveGammaShape.s:$(n)" spec='bmodeltest.evolution.substitutionmodel.ActiveLogger'>
	        <parameter idref="BMT_gammaShape.s:$(n)"/>
	        <mask idref="hasGammaRates.s:$(n)"/>
        </log>



            ]]>

            <connect method="beastfx.app.inputeditor.SiteModelInputEditor.customConnector"/>

            <connect srcID='BMT_ModelIndicator.s:$(n)'       targetID='state' inputName='stateNode' if='inlikelihood(BEASTModelTest.s:$(n))'/>
            <connect srcID='BMT_Rates.s:$(n)'                targetID='state' inputName='stateNode' if='inlikelihood(BEASTModelTest.s:$(n)) and BMT_Rates.s:$(n)/estimate=true'/>
            <connect srcID='BMT_gammaShape.s:$(n)'           targetID='state' inputName='stateNode' if='inlikelihood(BEASTModelTest.s:$(n)) and BMT_gammaShape.s:$(n)/estimate=true'/>
            <connect srcID='BMT_ProportionInvariable.s:$(n)'  targetID='state' inputName='stateNode' if='inlikelihood(BEASTModelTest.s:$(n)) and BMT_ProportionInvariable.s:$(n)/estimate=true'/>
            <connect srcID='hasInvariableSites.s:$(n)'        targetID='state' inputName='stateNode' if='inlikelihood(BEASTModelTest.s:$(n)) and hasInvariableSites.s:$(n)/estimate=true'/>
            <connect srcID='hasGammaRates.s:$(n)'            targetID='state' inputName='stateNode' if='inlikelihood(BEASTModelTest.s:$(n)) and hasGammaRates.s:$(n)/estimate=true'/>
            <connect srcID='hasEqualFreqs.s:$(n)'            targetID='state' inputName='stateNode' if='inlikelihood(BEASTModelTest.s:$(n))'/>
            <connect srcID='BMT_frequencies.s:$(n)'          targetID='state' inputName='stateNode' if='inlikelihood(BEASTModelTest.s:$(n)) and BMTfreqs.s:$(n)/empirical=false'/>

            <connect srcID='$(n)'          targetID='BMTfreqs.s:$(n)' inputName='data' if='inlikelihood(BEASTModelTest.s:$(n)) and BMTfreqs.s:$(n)/empirical=true'/>
            <connect srcID='BMT_frequencies.s:$(n)'          targetID='BMTfreqs.s:$(n)' inputName='frequencies' if='inlikelihood(BEASTModelTest.s:$(n)) and BMTfreqs.s:$(n)/empirical=false'/>

            <connect srcID='BMT_MutationRatePrior.s:$(n)'         targetID='prior' inputName='distribution' if='nooperator(FixMeanMutationRatesOperator) and inlikelihood(BMT_mutationRate.s:$(n)) and BMT_mutationRate.s:$(n)/estimate=true'/>
            <connect srcID='BMT_mutationRate.s:$(n)'              targetID='state' inputName='stateNode' if='inlikelihood(BMT_mutationRate.s:$(n)) and BMT_mutationRate.s:$(n)/estimate=true'/>
            <connect srcID='BMT_mutationRateScaler.s:$(n)'        targetID='mcmc' inputName='operator' if='nooperator(FixMeanMutationRatesOperator) and inlikelihood(BMT_mutationRate.s:$(n)) and BMT_mutationRate.s:$(n)/estimate=true'>Scales mutation rate of partition s:$(n)</connect>
            <connect srcID='BMT_mutationRate.s:$(n)'              targetID='tracelog' inputName='log' if='inlikelihood(BMT_mutationRate.s:$(n)) and BMT_mutationRate.s:$(n)/estimate=true'/>
            
            <connect srcID='BMT_RatesPrior.s:$(n)'                targetID='prior' inputName='distribution' if='inlikelihood(BEASTModelTest.s:$(n)) and BMT_Rates.s:$(n)/estimate=true'>Prior on substitution model rates for partition s:$(n)</connect>
            <connect srcID='BMT_GammaShapePrior.s:$(n)'           targetID='prior' inputName='distribution' if='inlikelihood(BEASTModelTest.s:$(n)) and BMT_gammaShape.s:$(n)/estimate=true'>Prior on gamma shape parameter for partition s:$(n)</connect>
            <connect srcID='BMT_PropInvariablePrior.s:$(n)'        targetID='prior' inputName='distribution' if='inlikelihood(BEASTModelTest.s:$(n)) and BMT_ProportionInvariable.s:$(n)/estimate=true'>Prior on proportion invariant for partition s:$(n)</connect>
            <connect srcID='BMT_freqsPrior.s:$(n)'                targetID='prior' inputName='distribution' if='inlikelihood(BEASTModelTest.s:$(n)) and BMTfreqs.s:$(n)/empirical=false'>Prior on frequencies for partition s:$(n)</connect>

            <connect srcID='BMT_ModelTestOperator.s:$(n)'         targetID='mcmc' inputName='operator' if='inlikelihood(BEASTModelTest.s:$(n))'>Resersible jump of subst models for partition s:$(n)</connect>
            <connect srcID='BMT_Ratescaler.s:$(n)'                targetID='mcmc' inputName='operator' if='inlikelihood(BEASTModelTest.s:$(n)) and BMT_Rates.s:$(n)/estimate=true'>Scales subst model rates of partition s:$(n)</connect>
            <connect srcID='BMT_gammaShapeScaler.s:$(n)'          targetID='mcmc' inputName='operator' if='inlikelihood(BEASTModelTest.s:$(n)) and BMT_gammaShape.s:$(n)/estimate=true'>Scales gamma shape parameter of partition s:$(n)</connect>
            <connect srcID='BMT_ProportionInvariableScaler.s:$(n)' targetID='mcmc' inputName='operator' if='inlikelihood(BEASTModelTest.s:$(n)) and BMT_ProportionInvariable.s:$(n)/estimate=true'>Scales proportion invariant of partition s:$(n)</connect>
            <connect srcID='BMT_hasGammaRatesFlipper.s:$(n)'      targetID='mcmc' inputName='operator' if='inlikelihood(BEASTModelTest.s:$(n)) and hasGammaRates.s:$(n)/estimate=true'>Switches gamma rates on/off of partition s:$(n)</connect>
            <connect srcID='BMT_hasInvariableSitesFlipper.s:$(n)'  targetID='mcmc' inputName='operator' if='inlikelihood(BEASTModelTest.s:$(n)) and hasInvariableSites.s:$(n)/estimate=true'>Switches invariant sites on/off of partition s:$(n)</connect>
            <connect srcID='BMT_FreqsFlipOperator.s:$(n)'         targetID='mcmc' inputName='operator' if='inlikelihood(BEASTModelTest.s:$(n))'>Switches equal frequencies of partition s:$(n)</connect>
            <connect srcID='BMT_FrequenciesExchanger.s:$(n)'      targetID='mcmc' inputName='operator' if='inlikelihood(BEASTModelTest.s:$(n)) and BMTfreqs.s:$(n)/empirical=false'/>
            
            <connect srcID='RevJump.s:$(n)'                       targetID='tracelog' inputName='log' if='inlikelihood(BEASTModelTest.s:$(n))'/>
            <connect srcID='BMT_ModelIndicator.s:$(n)'            targetID='tracelog' inputName='log' if='inlikelihood(BEASTModelTest.s:$(n))'/>
            <!--connect srcID='BMT_Rates.s:$(n)'                     targetID='tracelog' inputName='log' if='inlikelihood(BEASTModelTest.s:$(n))'/-->
            <connect srcID='BMT_gammaShape.s:$(n)'                targetID='tracelog' inputName='log' if='inlikelihood(BEASTModelTest.s:$(n))'/>
            <connect srcID='BMT_ProportionInvariable.s:$(n)'       targetID='tracelog' inputName='log' if='inlikelihood(BEASTModelTest.s:$(n))'/>
            <connect srcID='hasGammaRates.s:$(n)'                 targetID='tracelog' inputName='log' if='inlikelihood(BEASTModelTest.s:$(n))'/>
            <connect srcID='hasInvariableSites.s:$(n)'             targetID='tracelog' inputName='log' if='inlikelihood(BEASTModelTest.s:$(n))'/>
            <connect srcID='ActivePropInvariable.s:$(n)'           targetID='tracelog' inputName='log' if='inlikelihood(BEASTModelTest.s:$(n))'/>
            <connect srcID='ActiveGammaShape.s:$(n)'              targetID='tracelog' inputName='log' if='inlikelihood(BEASTModelTest.s:$(n))'/>
            <connect srcID='hasEqualFreqs.s:$(n)'                 targetID='tracelog' inputName='log' if='inlikelihood(BEASTModelTest.s:$(n))'/>
            <connect srcID='BMT_frequencies.s:$(n)'               targetID='tracelog' inputName='log' if='inlikelihood(BEASTModelTest.s:$(n)) and BMTfreqs.s:$(n)/empirical=false'/>

            </subtemplate>
    </mergewith>



    <!--bModelTest for starbeast3 -->
    <mergewith point='sb3SubstModelTemplates'>

            
        <subtemplate id='BEAST Model Test' class='bmodeltest.evolution.sitemodel.BEASTModelTestSiteModel' mainid='BEASTModelTest.s:$(n)'

            suppressInputs="bmodeltest.evolution.sitemodel.BEASTModelTestSiteModel.substModel,
bmodeltest.evolution.sitemodel.BEASTModelTestSiteModel.gammaCategoryCount,
bmodeltest.evolution.sitemodel.BEASTModelTestSiteModel.shape,
bmodeltest.evolution.sitemodel.BEASTModelTestSiteModel.proportionInvariant,
bmodeltest.evolution.sitemodel.BEASTModelTestSiteModel.hasInvariantSites,
bmodeltest.evolution.sitemodel.BEASTModelTestSiteModel.hasGammaRates,
bmodeltest.math.distributions.BMTPrior.x,
bmodeltest.math.distributions.BMTPrior.count,
bmodeltest.math.distributions.NucleotideRevJumpSubstModelRatePrior.substModel,
bmodeltest.math.distributions.NucleotideRevJumpSubstModelRatePrior.x,
bmodeltest.math.distributions.NucleotideRevJumpSubstModelRatePrior.modelIndicator,
bmodeltest.math.distributions.NucleotideRevJumpSubstModelRatePrior.distr"
            >
            <![CDATA[

        <stateNode id="BMT_ModelIndicator.s:$(n)" spec="parameter.IntegerParameter" lower="0" upper="5">5</stateNode>
        <parameter id="BMT_Rates.s:$(n)" dimension="6" lower="0.01" name="stateNode" upper="100.0">1.0</parameter>
        <parameter id="BMT_gammaShape.s:$(n)" name="stateNode">1.0</parameter>
        <parameter id="BMT_ProportionInvariable.s:$(n)" lower="0.0" name="stateNode" upper="1.0">0.1</parameter>
        <stateNode id="hasInvariableSites.s:$(n)" spec="parameter.IntegerParameter">1</stateNode>        
        <stateNode id="hasGammaRates.s:$(n)" spec="parameter.IntegerParameter">1</stateNode>        

        <!-- frequencies estimation -->
        <stateNode id="hasEqualFreqs.s:$(n)" spec="parameter.BooleanParameter">false</stateNode>
        <stateNode id="frequencies_BMT.s:$(n)" lower="0.0" upper="1.0" spec="parameter.RealParameter">0.25 0.25 0.25 0.25</stateNode>

        <distribution id="BMT_RatesPrior.s:$(n)" spec="bmodeltest.math.distributions.NucleotideRevJumpSubstModelRatePrior" modelIndicator="@BMT_ModelIndicator.s:$(n)" x="@BMT_Rates.s:$(n)"
            priorType="onTransitionsAndTraversals" substModel="@RevJump.s:$(n)"/>

        <distribution id="BMT_GammaShapePrior.s:$(n)" spec="bmodeltest.math.distributions.BMTPrior" count="@hasGammaRates.s:$(n)" x="@BMT_gammaShape.s:$(n)">
                <Exponential name="distr">
                    <parameter lower="0.0" name="mean" upper="0.0" estimate='false'>1.0</parameter>
                </Exponential>
        </distribution>
        
        <distribution id="BMT_PropInvariablePrior.s:$(n)" spec="bmodeltest.math.distributions.BMTPrior" count="@hasInvariableSites.s:$(n)" x="@BMT_ProportionInvariable.s:$(n)">
            <Beta name="distr" alpha="1.0" beta="4.0"/>
        </distribution>

        <prior id='BMT_MutationRatePrior.s:$(n)' x='@BMT_mutationRate.s:$(n)'><distr spec="OneOnX"/></prior>

            <!-- frequencies estimation -->
            <prior  id="BMT_freqsPrior.s:$(n)"  name="distribution" x="@frequencies_BMT.s:$(n)">
                <distr spec="beast.base.inference.distribution.Dirichlet" alpha="1.0 1.0 1.0 1.0"/>
            </prior>
            
        <siteModel id="BEASTModelTest.s:$(n)" spec="bmodeltest.evolution.sitemodel.BEASTModelTestSiteModel" 
            gammaCategoryCount="4" proportionInvariant="@BMT_ProportionInvariable.s:$(n)" shape="@BMT_gammaShape.s:$(n)"
            hasGammaRates="@hasGammaRates.s:$(n)" hasInvariantSites="@hasInvariableSites.s:$(n)">
            <parameter id="BMT_mutationRate.s:$(n)" estimate="false" name="mutationRate">1.0</parameter>
            <substModel id="RevJump.s:$(n)" spec="bmodeltest.evolution.substitutionmodel.NucleotideRevJumpSubstModel" 
                        modelIndicator="@BMT_ModelIndicator.s:$(n)" rates="@BMT_Rates.s:$(n)"
                        modelSet="transitionTransversionSplit">
                        <frequencies id="BMTfreqs.s:$(n)" spec="bmodeltest.evolution.substitutionmodel.ModelFrequencies" data="@$(n)" hasEqualFreqs='@hasEqualFreqs.s:$(n)'  empirical="false"/>
            </substModel>
        </siteModel>

    <operator id="BMT_ModelTestOperator.s:$(n)" spec="bmodeltest.evolution.operators.BMTMergeSplitOperator" modelIndicator="@BMT_ModelIndicator.s:$(n)" rates="@BMT_Rates.s:$(n)" substModel="@RevJump.s:$(n)" weight="1.0"/>
        <operator id="BMT_Ratescaler.s:$(n)" spec="bmodeltest.evolution.operators.BMTExchangeOperator" modelIndicator="@BMT_ModelIndicator.s:$(n)" rates="@BMT_Rates.s:$(n)" substModel="@RevJump.s:$(n)" delta="0.15" weight="1.0"/>
    

    <operator id="BMT_hasGammaRatesFlipper.s:$(n)" spec="bmodeltest.evolution.operators.BMTBirthDeathOperator" count="@hasGammaRates.s:$(n)" rates="@BMT_gammaShape.s:$(n)" weight="0.1"/>
        <operator id="BMT_gammaShapeScaler.s:$(n)" spec="bmodeltest.evolution.operators.BMTScaleOperator" count="@hasGammaRates.s:$(n)" parameter="@BMT_gammaShape.s:$(n)" scaleFactor="0.5" weight="0.05"/>

    <operator id="BMT_hasInvariableSitesFlipper.s:$(n)" spec="bmodeltest.evolution.operators.BMTBirthDeathOperator" count="@hasInvariableSites.s:$(n)" rates="@BMT_ProportionInvariable.s:$(n)" weight="0.1"/>
        <operator id="BMT_ProportionInvariableScaler.s:$(n)" spec="bmodeltest.evolution.operators.BMTScaleOperator" count="@hasInvariableSites.s:$(n)" parameter="@BMT_ProportionInvariable.s:$(n)" scaleFactor="0.5" weight="0.05"/>

        <operator id='BMT_mutationRateScaler.s:$(n)' spec='kernel.BactrianScaleOperator' scaleFactor="0.5" weight="0.1" parameter="@BMT_mutationRate.s:$(n)"/>
        
        <!-- frequencies estimation -->
        <operator id="BMT_FreqsFlipOperator.s:$(n)" spec="BitFlipOperator" parameter="@hasEqualFreqs.s:$(n)" weight="0.1"/>
        <operator id='frequencies_BMTExchanger.s:$(n)' spec='kernel.BactrianDeltaExchangeOperator' delta="0.01" weight="0.1" parameter="@frequencies_BMT.s:$(n)"/>
    
        <log id="ActivePropInvariable.s:$(n)" spec='bmodeltest.evolution.substitutionmodel.ActiveLogger'>
            <parameter idref="BMT_ProportionInvariable.s:$(n)"/>
            <mask idref="hasInvariableSites.s:$(n)"/>
        </log>
        <log id="ActiveGammaShape.s:$(n)" spec='bmodeltest.evolution.substitutionmodel.ActiveLogger'>
            <parameter idref="BMT_gammaShape.s:$(n)"/>
            <mask idref="hasGammaRates.s:$(n)"/>
        </log>



            ]]>

            <connect method="beastfx.app.inputeditor.SiteModelInputEditor.customConnector"/>

            <connect srcID='BMT_ModelIndicator.s:$(n)'       targetID='state' inputName='stateNode' if='inlikelihood(BEASTModelTest.s:$(n))'/>
            <connect srcID='BMT_Rates.s:$(n)'                targetID='state' inputName='stateNode' if='inlikelihood(BEASTModelTest.s:$(n)) and BMT_Rates.s:$(n)/estimate=true'/>
            <connect srcID='BMT_gammaShape.s:$(n)'           targetID='state' inputName='stateNode' if='inlikelihood(BEASTModelTest.s:$(n)) and BMT_gammaShape.s:$(n)/estimate=true'/>
            <connect srcID='BMT_ProportionInvariable.s:$(n)'  targetID='state' inputName='stateNode' if='inlikelihood(BEASTModelTest.s:$(n)) and BMT_ProportionInvariable.s:$(n)/estimate=true'/>
            <connect srcID='hasInvariableSites.s:$(n)'        targetID='state' inputName='stateNode' if='inlikelihood(BEASTModelTest.s:$(n)) and hasInvariableSites.s:$(n)/estimate=true'/>
            <connect srcID='hasGammaRates.s:$(n)'            targetID='state' inputName='stateNode' if='inlikelihood(BEASTModelTest.s:$(n)) and hasGammaRates.s:$(n)/estimate=true'/>
            <connect srcID='hasEqualFreqs.s:$(n)'            targetID='state' inputName='stateNode' if='inlikelihood(BEASTModelTest.s:$(n))'/>
            <connect srcID='frequencies_BMT.s:$(n)'          targetID='state' inputName='stateNode' if='inlikelihood(BEASTModelTest.s:$(n)) and BMTfreqs.s:$(n)/empirical=false'/>

            <connect srcID='$(n)'          targetID='BMTfreqs.s:$(n)' inputName='data' if='inlikelihood(BEASTModelTest.s:$(n)) and BMTfreqs.s:$(n)/empirical=true'/>
            <connect srcID='frequencies_BMT.s:$(n)'          targetID='BMTfreqs.s:$(n)' inputName='frequencies' if='inlikelihood(BEASTModelTest.s:$(n)) and BMTfreqs.s:$(n)/empirical=false'/>

            <connect srcID='BMT_MutationRatePrior.s:$(n)'         targetID='prior' inputName='distribution' if='nooperator(FixMeanMutationRatesOperator) and inlikelihood(BMT_mutationRate.s:$(n)) and BMT_mutationRate.s:$(n)/estimate=true'/>
            <connect srcID='BMT_mutationRate.s:$(n)'              targetID='state' inputName='stateNode' if='inlikelihood(BMT_mutationRate.s:$(n)) and BMT_mutationRate.s:$(n)/estimate=true'/>
            <connect srcID='BMT_mutationRateScaler.s:$(n)'        targetID='mcmc' inputName='operator' if='nooperator(FixMeanMutationRatesOperator) and inlikelihood(BMT_mutationRate.s:$(n)) and BMT_mutationRate.s:$(n)/estimate=true'>Scales mutation rate of partition s:$(n)</connect>
            <connect srcID='BMT_mutationRate.s:$(n)'              targetID='tracelog' inputName='log' if='inlikelihood(BMT_mutationRate.s:$(n)) and BMT_mutationRate.s:$(n)/estimate=true'/>
            
            <connect srcID='BMT_RatesPrior.s:$(n)'                targetID='prior' inputName='distribution' if='inlikelihood(BEASTModelTest.s:$(n)) and BMT_Rates.s:$(n)/estimate=true'>Prior on substitution model rates for partition s:$(n)</connect>
            <connect srcID='BMT_GammaShapePrior.s:$(n)'           targetID='prior' inputName='distribution' if='inlikelihood(BEASTModelTest.s:$(n)) and BMT_gammaShape.s:$(n)/estimate=true'>Prior on gamma shape parameter for partition s:$(n)</connect>
            <connect srcID='BMT_PropInvariablePrior.s:$(n)'        targetID='prior' inputName='distribution' if='inlikelihood(BEASTModelTest.s:$(n)) and BMT_ProportionInvariable.s:$(n)/estimate=true'>Prior on proportion invariant for partition s:$(n)</connect>
            <connect srcID='BMT_freqsPrior.s:$(n)'                targetID='prior' inputName='distribution' if='inlikelihood(BEASTModelTest.s:$(n)) and BMTfreqs.s:$(n)/empirical=false'>Prior on frequencies for partition s:$(n)</connect>

            <connect srcID='BMT_ModelTestOperator.s:$(n)'         targetID='mcmc' inputName='operator' if='inlikelihood(BEASTModelTest.s:$(n))'>Resersible jump of subst models for partition s:$(n)</connect>
            <connect srcID='BMT_Ratescaler.s:$(n)'                targetID='mcmc' inputName='operator' if='inlikelihood(BEASTModelTest.s:$(n)) and BMT_Rates.s:$(n)/estimate=true'>Scales subst model rates of partition s:$(n)</connect>

            <connect srcID='BMT_gammaShapeScaler.s:$(n)'          targetID='mcmc' inputName='operator' if='inlikelihood(BEASTModelTest.s:$(n)) and BMT_gammaShape.s:$(n)/estimate=true'>Scales gamma shape parameter of partition s:$(n)</connect>
            <connect srcID='BMT_ProportionInvariableScaler.s:$(n)' targetID='mcmc' inputName='operator' if='inlikelihood(BEASTModelTest.s:$(n)) and BMT_ProportionInvariable.s:$(n)/estimate=true'>Scales proportion invariant of partition s:$(n)</connect>
            <connect srcID='BMT_hasGammaRatesFlipper.s:$(n)'      targetID='mcmc' inputName='operator' if='inlikelihood(BEASTModelTest.s:$(n)) and hasGammaRates.s:$(n)/estimate=true'>Switches gamma rates on/off of partition s:$(n)</connect>
            <connect srcID='BMT_hasInvariableSitesFlipper.s:$(n)'  targetID='mcmc' inputName='operator' if='inlikelihood(BEASTModelTest.s:$(n)) and hasInvariableSites.s:$(n)/estimate=true'>Switches invariant sites on/off of partition s:$(n)</connect>
            <connect srcID='BMT_FreqsFlipOperator.s:$(n)'         targetID='mcmc' inputName='operator' if='inlikelihood(BEASTModelTest.s:$(n))'>Switches equal frequencies of partition s:$(n)</connect>
            <connect srcID='frequencies_BMTExchanger.s:$(n)'      targetID='mcmc' inputName='operator' if='inlikelihood(BEASTModelTest.s:$(n)) and BMTfreqs.s:$(n)/empirical=false'/>
            
            <connect srcID='RevJump.s:$(n)'                       targetID='tracelog' inputName='log' if='inlikelihood(BEASTModelTest.s:$(n))'/>
            <connect srcID='BMT_ModelIndicator.s:$(n)'            targetID='tracelog' inputName='log' if='inlikelihood(BEASTModelTest.s:$(n))'/>
            <!--connect srcID='BMT_Rates.s:$(n)'                     targetID='tracelog' inputName='log' if='inlikelihood(BEASTModelTest.s:$(n))'/-->
            <connect srcID='BMT_gammaShape.s:$(n)'                targetID='tracelog' inputName='log' if='inlikelihood(BEASTModelTest.s:$(n))'/>
            <connect srcID='BMT_ProportionInvariable.s:$(n)'       targetID='tracelog' inputName='log' if='inlikelihood(BEASTModelTest.s:$(n))'/>
            <connect srcID='hasGammaRates.s:$(n)'                 targetID='tracelog' inputName='log' if='inlikelihood(BEASTModelTest.s:$(n))'/>
            <connect srcID='hasInvariableSites.s:$(n)'             targetID='tracelog' inputName='log' if='inlikelihood(BEASTModelTest.s:$(n))'/>
            <connect srcID='ActivePropInvariable.s:$(n)'           targetID='tracelog' inputName='log' if='inlikelihood(BEASTModelTest.s:$(n))'/>
            <connect srcID='ActiveGammaShape.s:$(n)'              targetID='tracelog' inputName='log' if='inlikelihood(BEASTModelTest.s:$(n))'/>
            <connect srcID='hasEqualFreqs.s:$(n)'                 targetID='tracelog' inputName='log' if='inlikelihood(BEASTModelTest.s:$(n))'/>
            <connect srcID='frequencies_BMT.s:$(n)'               targetID='tracelog' inputName='log' if='inlikelihood(BEASTModelTest.s:$(n)) and BMTfreqs.s:$(n)/empirical=false'/>

            </subtemplate>

    </mergewith>


</beast>
